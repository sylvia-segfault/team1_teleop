#!/usr/bin/env python3
import rospy

import tf2_ros
import tf2_geometry_msgs
import tf_conversions
from geometry_msgs.msg import PoseStamped, TransformStamped

if __name__ == '__main__':
    rospy.init_node('walker_center_transformer')

    tfBuffer = tf2_ros.Buffer()
    tf2_ros.TransformListener(tfBuffer)
    br = tf2_ros.TransformBroadcaster()

    walker_pos_3d = PoseStamped()
    walker_pos_3d.header.seq = 1
    walker_pos_3d.header.frame_id = 'walker_center'
    walker_pos_3d.pose.position.x = 0
    walker_pos_3d.pose.position.y = 0
    walker_pos_3d.pose.position.z = 0
    walker_pos_3d.pose.orientation.x = 0
    walker_pos_3d.pose.orientation.y = -0.7068252
    walker_pos_3d.pose.orientation.z = 0
    walker_pos_3d.pose.orientation.w = 0.7073883

    rate = rospy.Rate(10.0)

    other_frame = "base_link"

    while not rospy.is_shutdown():
        walker_pos_3d.header.stamp = rospy.Time.now()
        try:
            trans = tfBuffer.lookup_transform(other_frame, 'walker_center', walker_pos_3d.header.stamp, rospy.Duration(1))
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            print(e)
            rate.sleep()
            continue
        walker_pos_2d = tf2_geometry_msgs.do_transform_pose(walker_pos_3d, trans)
        walker_pos_2d.pose.position.z = 0
        q = walker_pos_2d.pose.orientation
        r, p, y = tf_conversions.transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])
        new_quat = tf_conversions.transformations.quaternion_from_euler(0, 0, y)
        walker_pos_2d.pose.orientation.x = new_quat[0]
        walker_pos_2d.pose.orientation.y = new_quat[1]
        walker_pos_2d.pose.orientation.z = new_quat[2]
        walker_pos_2d.pose.orientation.w = new_quat[3]
        
        t = TransformStamped()

        t.header.stamp = rospy.Time.now()
        t.header.frame_id = other_frame  # intended map  # maybe should be walker_center
        t.child_frame_id = "xy_walker_center"
        t.transform.translation.x = walker_pos_2d.pose.position.x
        t.transform.translation.y = walker_pos_2d.pose.position.y
        t.transform.translation.z = walker_pos_2d.pose.position.z
        t.transform.rotation.x = walker_pos_2d.pose.orientation.x
        t.transform.rotation.y = walker_pos_2d.pose.orientation.y
        t.transform.rotation.z = walker_pos_2d.pose.orientation.z
        t.transform.rotation.w = walker_pos_2d.pose.orientation.w

        br.sendTransform(t)
        rate.sleep()